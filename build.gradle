buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath group:"com.in3k8.gradle.plugins", name: "apiary-springmvc-stub", version:"0.1-SNAPSHOT"
    }
}



apply plugin: "project-reports"
apply plugin: "idea"
apply plugin: "groovy"
apply plugin: "maven"
apply plugin: "war"
apply plugin: "jetty"
apply plugin: "apiary-springmvc-stub"

apply from: 'scripts/idea.gradle'

sourceCompatibility = 1.6
targetCompatibility = 1.6
version = "0.1-SNAPSHOT"

repositories {
    mavenLocal()
    mavenCentral()
}

configure(install.repositories.mavenInstaller) {
    pom.version = project.version
    pom.groupId = "com.in3k8"
    pom.artifactId = 'spring-mvc-javaconfig'
}

dependencies {
    groovy group: 'org.codehaus.groovy', name: 'groovy', version: '1.8.6'

    testCompile ("org.spockframework:spock-core:0.6-groovy-1.8") {
        exclude module: 'groovy-all'
    }
    compile "com.google.code.gson:gson:2.0",
            "commons-lang:commons-lang:2.4"

    compile 'log4j:log4j:1.2.16'
    compile 'javax.servlet:servlet-api:2.5',
			'org.apache.httpcomponents:httpclient:4.1.2',
			'org.springframework:spring-webmvc:3.1.0.RELEASE',
			'org.codehaus.jackson:jackson-mapper-asl:1.9.0',
            'cglib:cglib-nodep:2.2'
    compile "org.springframework:spring-test:3.1.0.RELEASE"

    testCompile "org.springframework:spring-test:3.1.0.RELEASE",
            "org.springframework:spring-core:3.1.0.RELEASE"

}


private def getCompileDependencies() {
    def depList = []
    configurations.compile.resolvedConfiguration.resolvedArtifacts.each {
        if (!depList.contains(it.moduleVersion.id.name)) {
            depList.add([name: it.moduleVersion.id.name, file: it.file])
        }
    }
    return depList
}


'apiary-spring'  {configLocation ='com.in3k8.javaconfig.config.AppConfig'}





war {
    archiveName = 'spring-mvc-javaconfig.war'
}

[jettyRun,jettyRunWar]*.contextPath = 'spring-mvc-javaconfig'

sourceSets {
    functionalTest {
        groovy {
            srcDirs = ['src/functionalTest/groovy']
        }
        output.classesDir = test.output.classesDir
        compileClasspath = configurations.testCompile
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
    }
}

task functionalTest(type: Test, dependsOn: ['compileFunctionalTestGroovy','jettyRunWar']) {

    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
}

gradle.taskGraph.whenReady {graph ->
    //Turn on jetty daemon for functional tests only
    if (graph.hasTask(functionalTest)) {
        jettyRunWar.daemon = true
    }

}


task wrapper(type: Wrapper) {
    gradleVersion = '1.0'
}

